/**
 * generated by Scrooge ${project.version}
 */
package ca.stevenskelton.thrift.testservice

import com.twitter.finagle.SourcedException
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.ThriftClientRequest
import com.twitter.finagle.{Service => FinagleService}
import com.twitter.scrooge.{ThriftStruct, ThriftStructCodec}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.{TMemoryBuffer, TMemoryInputTransport}
import scala.collection.{Map, Set}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-09-20T13:33:14.999-0400")
class TestApi$FinagleClient(
  val service: FinagleService[ThriftClientRequest, Array[Byte]],
  val protocolFactory: TProtocolFactory = new TBinaryProtocol.Factory,
  val serviceName: String = "",
  stats: StatsReceiver = NullStatsReceiver
) extends TestApi[Future] {
  import TestApi._

  protected def encodeRequest(name: String, args: ThriftStruct) = {
    val buf = new TMemoryBuffer(512)
    val oprot = protocolFactory.getProtocol(buf)

    oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0))
    args.write(oprot)
    oprot.writeMessageEnd()

    val bytes = Arrays.copyOfRange(buf.getArray, 0, buf.length)
    new ThriftClientRequest(bytes, false)
  }

  protected def decodeResponse[T <: ThriftStruct](resBytes: Array[Byte], codec: ThriftStructCodec[T]) = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes))
    val msg = iprot.readMessageBegin()
    try {
      if (msg.`type` == TMessageType.EXCEPTION) {
        val exception = TApplicationException.read(iprot) match {
          case sourced: SourcedException =>
            if (serviceName != "") sourced.serviceName = serviceName
            sourced
          case e => e
        }
        throw exception
      } else {
        codec.decode(iprot)
      }
    } finally {
      iprot.readMessageEnd()
    }
  }

  protected def missingResult(name: String) = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  // ----- end boilerplate.

  private[this] val scopedStats = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_wNoDelay {
    val RequestsCounter = scopedStats.scope("wNoDelay").counter("requests")
    val SuccessCounter = scopedStats.scope("wNoDelay").counter("success")
    val FailuresCounter = scopedStats.scope("wNoDelay").counter("failures")
    val FailuresScope = scopedStats.scope("wNoDelay").scope("failures")
  }
  
  
  def wNoDelay(id: Int): Future[SampleStruct] = {
    __stats_wNoDelay.RequestsCounter.incr()
    this.service(encodeRequest("wNoDelay", wNoDelay$args(id))) flatMap { response =>
      val result = decodeResponse(response, wNoDelay$result)
      val exception =
        (result.notFoundException orElse result.disabledException).map(Future.exception)
      exception.orElse(result.success.map(Future.value)).getOrElse(Future.exception(missingResult("wNoDelay")))
    } rescue {
      case ex: SourcedException => {
        if (this.serviceName != "") { ex.serviceName = this.serviceName }
        Future.exception(ex)
      }
    } onSuccess { _ =>
      __stats_wNoDelay.SuccessCounter.incr()
    } onFailure { ex =>
      __stats_wNoDelay.FailuresCounter.incr()
      __stats_wNoDelay.FailuresScope.counter(ex.getClass.getName).incr()
    }
  }
  private[this] object __stats_w100msDelay {
    val RequestsCounter = scopedStats.scope("w100msDelay").counter("requests")
    val SuccessCounter = scopedStats.scope("w100msDelay").counter("success")
    val FailuresCounter = scopedStats.scope("w100msDelay").counter("failures")
    val FailuresScope = scopedStats.scope("w100msDelay").scope("failures")
  }
  
  
  def w100msDelay(id: Int): Future[SampleStruct] = {
    __stats_w100msDelay.RequestsCounter.incr()
    this.service(encodeRequest("w100msDelay", w100msDelay$args(id))) flatMap { response =>
      val result = decodeResponse(response, w100msDelay$result)
      val exception =
        (result.notFoundException orElse result.disabledException).map(Future.exception)
      exception.orElse(result.success.map(Future.value)).getOrElse(Future.exception(missingResult("w100msDelay")))
    } rescue {
      case ex: SourcedException => {
        if (this.serviceName != "") { ex.serviceName = this.serviceName }
        Future.exception(ex)
      }
    } onSuccess { _ =>
      __stats_w100msDelay.SuccessCounter.incr()
    } onFailure { ex =>
      __stats_w100msDelay.FailuresCounter.incr()
      __stats_w100msDelay.FailuresScope.counter(ex.getClass.getName).incr()
    }
  }
  private[this] object __stats_w200msDelay {
    val RequestsCounter = scopedStats.scope("w200msDelay").counter("requests")
    val SuccessCounter = scopedStats.scope("w200msDelay").counter("success")
    val FailuresCounter = scopedStats.scope("w200msDelay").counter("failures")
    val FailuresScope = scopedStats.scope("w200msDelay").scope("failures")
  }
  
  
  def w200msDelay(id: Int): Future[SampleStruct] = {
    __stats_w200msDelay.RequestsCounter.incr()
    this.service(encodeRequest("w200msDelay", w200msDelay$args(id))) flatMap { response =>
      val result = decodeResponse(response, w200msDelay$result)
      val exception =
        (result.notFoundException orElse result.disabledException).map(Future.exception)
      exception.orElse(result.success.map(Future.value)).getOrElse(Future.exception(missingResult("w200msDelay")))
    } rescue {
      case ex: SourcedException => {
        if (this.serviceName != "") { ex.serviceName = this.serviceName }
        Future.exception(ex)
      }
    } onSuccess { _ =>
      __stats_w200msDelay.SuccessCounter.incr()
    } onFailure { ex =>
      __stats_w200msDelay.FailuresCounter.incr()
      __stats_w200msDelay.FailuresScope.counter(ex.getClass.getName).incr()
    }
  }
  private[this] object __stats_w1sDelay {
    val RequestsCounter = scopedStats.scope("w1sDelay").counter("requests")
    val SuccessCounter = scopedStats.scope("w1sDelay").counter("success")
    val FailuresCounter = scopedStats.scope("w1sDelay").counter("failures")
    val FailuresScope = scopedStats.scope("w1sDelay").scope("failures")
  }
  
  
  def w1sDelay(id: Int): Future[SampleStruct] = {
    __stats_w1sDelay.RequestsCounter.incr()
    this.service(encodeRequest("w1sDelay", w1sDelay$args(id))) flatMap { response =>
      val result = decodeResponse(response, w1sDelay$result)
      val exception =
        (result.notFoundException orElse result.disabledException).map(Future.exception)
      exception.orElse(result.success.map(Future.value)).getOrElse(Future.exception(missingResult("w1sDelay")))
    } rescue {
      case ex: SourcedException => {
        if (this.serviceName != "") { ex.serviceName = this.serviceName }
        Future.exception(ex)
      }
    } onSuccess { _ =>
      __stats_w1sDelay.SuccessCounter.incr()
    } onFailure { ex =>
      __stats_w1sDelay.FailuresCounter.incr()
      __stats_w1sDelay.FailuresScope.counter(ex.getClass.getName).incr()
    }
  }
}