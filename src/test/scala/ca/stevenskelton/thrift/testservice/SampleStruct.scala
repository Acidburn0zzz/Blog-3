/**
 * generated by Scrooge ${project.version}
 */
package ca.stevenskelton.thrift.testservice

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object SampleStruct extends ThriftStructCodec3[SampleStruct] {
  val Struct = new TStruct("SampleStruct")
  val IdField = new TField("id", TType.I32, 1)
  val NameField = new TField("name", TType.STRING, 2)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: SampleStruct) {
  }

  override def encode(_item: SampleStruct, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): SampleStruct = Immutable.decode(_iprot)

  def apply(
    id: Int,
    name: String
  ): SampleStruct = new Immutable(
    id,
    name
  )

  def unapply(_item: SampleStruct): Option[Product2[Int, String]] = Some(_item)

  object Immutable extends ThriftStructCodec3[SampleStruct] {
    override def encode(_item: SampleStruct, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): SampleStruct = {
      var id: Int = 0
      var _got_id = false
      var name: String = null
      var _got_name = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* id */
              _field.`type` match {
                case TType.I32 => {
                  id = {
                    _iprot.readI32()
                  }
                  _got_id = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* name */
              _field.`type` match {
                case TType.STRING => {
                  name = {
                    _iprot.readString()
                  }
                  _got_name = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        id,
        name
      )
    }
  }

  /**
   * The default read-only implementation of SampleStruct.  You typically should not need to
   * directly reference this class; instead, use the SampleStruct.apply method to construct
   * new instances.
   */
  class Immutable(
    val id: Int,
    val name: String
  ) extends SampleStruct

  /**
   * This Proxy trait allows you to extend the SampleStruct trait with additional state or
   * behavior and implement the read-only methods from SampleStruct using an underlying
   * instance.
   */
  trait Proxy extends SampleStruct {
    protected def _underlying_SampleStruct: SampleStruct
    override def id: Int = _underlying_SampleStruct.id
    override def name: String = _underlying_SampleStruct.name
  }
}

trait SampleStruct extends ThriftStruct
  with Product2[Int, String]
  with java.io.Serializable
{
  import SampleStruct._


  def id: Int
  def name: String

  def _1 = id
  def _2 = name


  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): SampleStruct =
    _fieldId match {
      case 1 => copy(id = 0)
      case 2 => copy(name = null)
      case _ => this
    }

  override def write(_oprot: TProtocol) {
    SampleStruct.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val id_item = id
      _oprot.writeFieldBegin(IdField)
      _oprot.writeI32(id_item)
      _oprot.writeFieldEnd()
    }
    if (name ne null) {
      val name_item = name
      _oprot.writeFieldBegin(NameField)
      _oprot.writeString(name_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: Int = this.id, 
    name: String = this.name
  ): SampleStruct =
    new Immutable(
      id,
      name
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[SampleStruct]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => id
    case 1 => name
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "SampleStruct"
}