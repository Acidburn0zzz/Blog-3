/**
 * generated by Scrooge ${project.version}
 */
package ca.stevenskelton.thrift.testservice

import com.twitter.scrooge.{
  ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object DisabledException extends ThriftStructCodec3[DisabledException] {
  val Struct = new TStruct("DisabledException")
  val FieldField = new TField("field", TType.STRING, 1)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: DisabledException) {
  }

  override def encode(_item: DisabledException, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol): DisabledException = Immutable.decode(_iprot)

  def apply(
    field: String
  ): DisabledException = new Immutable(
    field
  )

  def unapply(_item: DisabledException): Option[String] = Some(_item.field)

  object Immutable extends ThriftStructCodec3[DisabledException] {
    override def encode(_item: DisabledException, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): DisabledException = {
      var field: String = null
      var _got_field = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* field */
              _field.`type` match {
                case TType.STRING => {
                  field = {
                    _iprot.readString()
                  }
                  _got_field = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ =>
              TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        field
      )
    }
  }

  /**
   * The default read-only implementation of DisabledException.  You typically should not need to
   * directly reference this class; instead, use the DisabledException.apply method to construct
   * new instances.
   */
  class Immutable(
    val field: String
  ) extends DisabledException

}

trait DisabledException extends ThriftException with com.twitter.finagle.SourcedException with ThriftStruct
  with Product1[String]
  with java.io.Serializable
{
  import DisabledException._


  def field: String

  def _1 = field


  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): DisabledException =
    _fieldId match {
      case 1 => copy(field = null)
      case _ => this
    }

  override def write(_oprot: TProtocol) {
    DisabledException.validate(this)
    _oprot.writeStructBegin(Struct)
    if (field ne null) {
      val field_item = field
      _oprot.writeFieldBegin(FieldField)
      _oprot.writeString(field_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    field: String = this.field
  ): DisabledException =
    new Immutable(
      field
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[DisabledException]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

  override def getMessage: String = String.valueOf(field)

  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => field
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "DisabledException"
}